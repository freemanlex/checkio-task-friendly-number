{% comment %}New initial code template{% endcomment %}
{% block env %}import assert from "assert";{% endblock env %}

{% block start %}
function friendlyNumber(number: number, options: Object): string {
    if (!options) {
        options = {};
    }
    if (!options.base) {
        options.base = 1000;
    }
    if (!options.decimals) {
        options.decimals = 0;
    }
    if (!options.suffix) {
        options.suffix = '';
    }
    if (!options.powers) {
        options.powers = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];
    }
    return "";
}
{% endblock start %}

{% block example %}
console.log('Example:');
console.log(friendlyNumber(102, {}));
{% endblock %}

// These "asserts" are used for self-checking
{% block tests %}
{% for t in tests %}
assert.strictEqual({% block call %}friendlyNumber({{t.input|j_args}}){% endblock %}, {% block result %}{{t.answer|j}}{% endblock %});{% endfor %}
{% endblock %}

{% block final %}
console.log("Coding complete? Click 'Check Solution' to earn rewards!");
{% endblock final %}